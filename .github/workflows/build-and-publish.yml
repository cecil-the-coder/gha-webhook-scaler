name: Build and Publish Container

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch event
            type=ref,event=branch
            # Tag event
            type=ref,event=tag
            # PR event
            type=ref,event=pr
            # Set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Set edge tag for develop branch
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/develop' }}
          labels: |
            org.opencontainers.image.title=GHA Webhook Scaler
            org.opencontainers.image.description=High-performance, webhook-driven auto-scaler for GitHub Actions self-hosted runners
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch event
            type=ref,event=branch
            # Tag event
            type=ref,event=tag
            # PR event
            type=ref,event=pr
            # Set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Set edge tag for develop branch
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Create and push multi-arch manifest
        run: |
          # Create multi-arch manifest
          echo '${{ steps.meta.outputs.tags }}' | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Creating manifest for tag: $tag"
              docker buildx imagetools create \
                --tag "$tag" \
                ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64 \
                ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64
            fi
          done

  security-scan:
    runs-on: ubuntu-latest
    needs: create-manifest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-container:
    runs-on: ubuntu-latest
    needs: create-manifest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test container health
        run: |
          # Extract platform for image tag
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | tr '/' '-')
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          
          echo "Testing container health for ${{ matrix.platform }}"
          
          # Run container in background
          docker run -d \
            --name test-container \
            --platform ${{ matrix.platform }} \
            -p 8080:8080 \
            -e GITHUB_TOKEN=test \
            -e REPO_OWNER=test \
            -e REPO_NAME=test \
            ${IMAGE_TAG}
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          for i in {1..30}; do
            if curl -f http://localhost:8080/health; then
              echo "Health check passed"
              break
            fi
            echo "Waiting for health check... ($i/30)"
            sleep 2
          done
          
          # Cleanup
          docker stop test-container
          docker rm test-container
